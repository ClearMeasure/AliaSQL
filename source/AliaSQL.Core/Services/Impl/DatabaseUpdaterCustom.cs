using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using AliaSQL.Core.Model;
using System.Xml.Serialization;

namespace AliaSQL.Core.Services.Impl
{
	public class DatabaseUpdaterCustom : IDatabaseActionExecutor
	{
		private readonly IScriptFolderExecutor _folderExecutor;
        private readonly IQueryExecutor _queryExecutor;

		public DatabaseUpdaterCustom(IScriptFolderExecutor folderExecutor, IQueryExecutor queryExecutor)
		{
			_folderExecutor = folderExecutor;
            _queryExecutor = queryExecutor;
		}

	    public DatabaseUpdaterCustom():this(new ScriptFolderExecutor(), new QueryExecutor())
	    {
	        
	    }

	    public void Execute(TaskAttributes taskAttributes, ITaskObserver taskObserver)
		{
	        if (!_queryExecutor.CheckDatabaseExists(taskAttributes.ConnectionSettings))
	        {
                taskObserver.Log(string.Format("Database does not exist. Attempting to create database before updating."));
                string sql = string.Format("create database [{0}]", taskAttributes.ConnectionSettings.Database);
                _queryExecutor.ExecuteNonQuery(taskAttributes.ConnectionSettings, sql);
	        }

            // load config file and get our folder list
	        var configFilePath = GetConfigFilePath(taskAttributes, taskObserver);
	        var sortedFolderList = GetSortedFolderListFromFolderConfig(configFilePath);

	        foreach (var folder in sortedFolderList)
	        {
	            var behavior = folder.behavior.ToLowerInvariant();
                switch (behavior)
                {
                    case "new":
                        taskObserver.Log(string.Format("--- Running new scripts in the {0} folder.", folder.name));
                        _folderExecutor.ExecuteScriptsInFolder(taskAttributes, folder.name, taskObserver);
                        break;
                    case "changed":
                        taskObserver.Log(string.Format("--- Running changed scripts in the {0} folder.", folder.name));
                        _folderExecutor.ExecuteChangedScriptsInFolder(taskAttributes, folder.name, taskObserver);
                        break;
                    case "all":
                        taskObserver.Log(string.Format("--- Running all scripts in the {0} folder.", folder.name));
                        _folderExecutor.ExecuteRunAlwaysScriptsInFolder(taskAttributes, folder.name, taskObserver);
                        break;
                    default:
                        var msg = string.Format(
                            "Error! We don't understand the {0} behavior you have configured for the {1} folder.",
                            folder.behavior,
                            folder.name);
                        taskObserver.Log(msg);
                        throw new Exception(msg);
                        break;
                }
	        }

        }

	    private List<foldersFolder> GetSortedFolderListFromFolderConfig(string configFilePath)
	    {
            var serializer = new XmlSerializer(typeof(folders));
	        folders folderConfig;
	        using (var reader = XmlReader.Create(configFilePath))
	        {
	            folderConfig = (folders) serializer.Deserialize(reader);
	        }

	        return folderConfig.Items.OrderBy(f => Convert.ToInt32(f.order)).ToList();
	    }

	    private string GetConfigFilePath(TaskAttributes taskAttributes, ITaskObserver taskObserver)
	    {
	        var configFilePath = Path.Combine(taskAttributes.ScriptDirectory, "updatecustom.xml");
	        if (!File.Exists(configFilePath))
	        {
	            var msg = string.Format("Error! updatecustom.xml not found in: {0}", taskAttributes.ScriptDirectory);
	            taskObserver.Log(msg);
	            throw new Exception(msg);
	        }
	        return configFilePath;
	    }



	    #region folders config deserialization support

        // HT: http://stackoverflow.com/a/364410/121466

        //------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by a tool.
        //     Runtime Version:4.0.30319.42000
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------
        // 
        // This source code was auto-generated by xsd, Version=4.6.1055.0.
        // 

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
        [System.SerializableAttribute()]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.ComponentModel.DesignerCategoryAttribute("code")]
        [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
        [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
        public class folders
        {

            private foldersFolder[] itemsField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute("folder", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
            public foldersFolder[] Items
            {
                get
                {
                    return this.itemsField;
                }
                set
                {
                    this.itemsField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
        [System.SerializableAttribute()]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.ComponentModel.DesignerCategoryAttribute("code")]
        [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
        public  class foldersFolder
        {

            private string nameField;

            private string orderField;

            private string behaviorField;

            /// <remarks/>
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string name
            {
                get
                {
                    return this.nameField;
                }
                set
                {
                    this.nameField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
            public string order
            {
                get
                {
                    return this.orderField;
                }
                set
                {
                    this.orderField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string behavior
            {
                get
                {
                    return this.behaviorField;
                }
                set
                {
                    this.behaviorField = value;
                }
            }
        }

        #endregion // folders config deserialization support


    }
}